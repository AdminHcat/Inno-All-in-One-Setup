#ifndef _SERVICECTRL_ISH_
  #Define _SERVICECTRL_ISH_ __PATHFILENAME__

[Code]
//Author: Vincenzo
//Article created: 06/11/02 22:48:16
//Article URL : http://www.vincenzo.net/isxkb/modules.php?name=News&file=article&sid=32
//--------------------------------------------------------------------------------
//Author: Silvio Iaccarino
//
//Examples how to fiddle about win32 functions using isx pascal scripts
//- Check, install, remove, stop and start NT based services
//- Create or update entries in the services file

// Modified by WLDNA @ 2010-07-01
// Function added ConfigService
// Modified by WLDNA @ 2011-03-12
// Function added UninsService


Type
  TSERVICE_STATUS = Record
    dwServiceType: Cardinal;
    dwCurrentState: Cardinal;
    dwControlsAccepted: Cardinal;
    dwWin32ExitCode: Cardinal;
    dwServiceSpecificExitCode: Cardinal;
    dwCheckPoint: Cardinal;
    dwWaitHint: Cardinal;
  End;
//  THANDLE = Cardinal;

Const
  SERVICE_QUERY_CONFIG = $1;
  SERVICE_CHANGE_CONFIG = $2;
  SERVICE_QUERY_STATUS = $4;

  SERVICE_START = $10;
  SERVICE_STOP = $20;

  SERVICE_ALL_ACCESS = $F01FF;
  SC_MANAGER_ALL_ACCESS = $F003F;
  SERVICE_WIN32_OWN_PROCESS = $10;
  SERVICE_WIN32_SHARE_PROCESS = $20;
  SERVICE_WIN32 = $30;
  SERVICE_INTERACTIVE_PROCESS = $100;

  SERVICE_BOOT_START = $0;
  SERVICE_SYSTEM_START = $1;
  SERVICE_AUTO_START = $2;
  SERVICE_DEMAND_START = $3;
  SERVICE_DISABLED = $4;

  SERVICE_DELETE = $10000;

  SERVICE_CONTROL_STOP = $1;
  SERVICE_CONTROL_PAUSE = $2;
  SERVICE_CONTROL_CONTINUE = $3;
  SERVICE_CONTROL_INTERROGATE = $4;

  SERVICE_STOPPED = $1;
  SERVICE_START_PENDING = $2;
  SERVICE_STOP_PENDING = $3;
  SERVICE_RUNNING = $4;
  SERVICE_CONTINUE_PENDING = $5;
  SERVICE_PAUSE_PENDING = $6;
  SERVICE_PAUSED = $7;

  // #######################################################################################
  // nt based service utilities
  // #######################################################################################
Function OpenSCManager(lpMachineName, lpDatabaseName: String; dwDesiredAccess: Cardinal): THANDLE;
  External 'OpenSCManager{#A}@advapi32.dll stdcall';

Function OpenService(hSCManager: THANDLE; lpServiceName: String; dwDesiredAccess: Cardinal): THANDLE;
  External 'OpenService{#A}@advapi32.dll stdcall';

Function CloseServiceHandle(hSCObject: THANDLE): boolean;
  External 'CloseServiceHandle@advapi32.dll stdcall';

Function CreateService(hSCManager: THANDLE; lpServiceName, lpDisplayName: String; dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: Cardinal; lpBinaryPathName, lpLoadOrderGroup: String; lpdwTagId: Cardinal; lpDependencies, lpServiceStartName, lpPassword: String): Cardinal;
  External 'CreateService{#A}@advapi32.dll stdcall';

Function DeleteService(hService: THANDLE): boolean;
  External 'DeleteService@advapi32.dll stdcall';

Function StartNTService(hService: THANDLE; dwNumServiceArgs: Cardinal; lpServiceArgVectors: Cardinal): boolean;
  External 'StartService{#A}@advapi32.dll stdcall';

Function ControlService(hService: THANDLE; dwControl: Cardinal; Var ServiceStatus: TSERVICE_STATUS): boolean;
  External 'ControlService@advapi32.dll stdcall';

Function QueryServiceStatus(hService: THANDLE; Var ServiceStatus: TSERVICE_STATUS): boolean;
  External 'QueryServiceStatus@advapi32.dll stdcall';

Function QueryServiceStatusEx(hService: THANDLE; ServiceStatus: TSERVICE_STATUS): boolean;
  External 'QueryServiceStatus@advapi32.dll stdcall';

Function OpenServiceManager(): THANDLE;
Begin
  Result := 0;
  If UsingWinNT() Then
  Begin
    Result := OpenSCManager('', 'ServicesActive', SC_MANAGER_ALL_ACCESS);
    If Result = 0 Then
      MsgBox('the servicemanager is not available', mbError, MB_OK);
  End
  Else
    MsgBox('only nt based systems support services', mbError, MB_OK);
End;

Function IsServiceInstalled(ServiceName: String): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := OpenService(hSCM, ServiceName, SERVICE_QUERY_CONFIG);
    If hService <> 0 Then
    Begin
      Result := true;
      CloseServiceHandle(hService)
    End;
    CloseServiceHandle(hSCM)
  End
End;

Function InstallService(FileName, ServiceName, DisplayName, Description: String; ServiceType, StartType: Cardinal): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := CreateService(hSCM, ServiceName, DisplayName, SERVICE_ALL_ACCESS, ServiceType, StartType, 0, FileName, '', 0, '', '', '');
    If hService <> 0 Then
    Begin
      Result := true;
      // Win2K & WinXP supports aditional description text for services
      If Description <> '' Then
        RegWriteStringValue(HKLM, 'System\CurrentControlSet\Services\' + ServiceName, 'Description', Description);
      CloseServiceHandle(hService)
    End;
    CloseServiceHandle(hSCM)
  End
End;

Function RemoveService(ServiceName: String): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := OpenService(hSCM, ServiceName, SERVICE_ALL_ACCESS);
    If hService <> 0 Then
    Begin
      Result := DeleteService(hService);
      CloseServiceHandle(hService)
    End;
    CloseServiceHandle(hSCM)
  End
End;

Function StartService(ServiceName: String): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := OpenService(hSCM, ServiceName, SERVICE_START);
    If hService <> 0 Then
    Begin
      Result := StartNTService(hService, 0, 0);
      CloseServiceHandle(hService)
    End;
    CloseServiceHandle(hSCM)
  End;
End;

Function StopService(ServiceName: String): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
  Status: TSERVICE_STATUS;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := OpenService(hSCM, ServiceName, SERVICE_STOP);
    If hService <> 0 Then
    Begin
      Result := ControlService(hService, SERVICE_CONTROL_STOP, Status);
      CloseServiceHandle(hService)
    End;
    CloseServiceHandle(hSCM)
  End;
End;

Function IsServiceRunning(ServiceName: String): boolean;
Var
  hSCM: THANDLE;
  hService: THANDLE;
  Status: TSERVICE_STATUS;
Begin
  hSCM := OpenServiceManager();
  Result := false;
  If hSCM <> 0 Then
  Begin
    hService := OpenService(hSCM, ServiceName, SERVICE_QUERY_STATUS);
    If hService <> 0 Then
    Begin
      If QueryServiceStatus(hService, Status) Then
        Result := (Status.dwCurrentState = SERVICE_RUNNING);
      CloseServiceHandle(hService);
    End;
    CloseServiceHandle(hSCM);
  End
End;

// #######################################################################################
// create an entry in the services file
// #######################################################################################
function SetupService(service, port, comment: string) : boolean;
var
	filename	: string;
	s			: string;
	lines		: TArrayOfString;
	n			: longint;
	i			: longint;
	errcode		: integer;
	servnamlen	: integer;
	error		: boolean;
begin
	if UsingWinNT() = true then
		filename := ExpandConstant('{sys}\drivers\etc\services')
	else
		filename := ExpandConstant('{win}\services');

	if LoadStringsFromFile(filename,lines) = true then begin
		Result		:= true;
		n			:= GetArrayLength(lines) - 1;
		servnamlen	:= Length(service);
		error		:= false;

		for i:=0 to n do begin
			if Copy(lines[i],1,1) <> '#' then begin
				s := Copy(lines[i],1,servnamlen);
				if CompareText(s,service) = 0 then
					exit; // found service-entry

				if Pos(port,lines[i]) > 0 then begin
					error := true;
					lines[i] := '#' + lines[i] + '   # disabled because collision with  ' + service + ' service';
				end;
			end
			else if CompareText(Copy(lines[i],2,servnamlen),service) = 0 then begin
				// service-entry was disabled
				Delete(lines[i],1,1);
				Result := SaveStringsToFile(filename,lines,false);
				exit;
			end;
		end;

		if error = true then begin
			// save disabled entries
			if SaveStringsToFile(filename,lines,false) = false then begin
				Result := false;
				exit;
			end;
		end;

		// create new service entry
		s := service + '       ' + port + '           # ' + comment + #13#10;
		if SaveStringToFile(filename,s,true) = false then begin
			Result := false;
			exit;
		end;

		if error = true then begin
			MsgBox('the ' + service + ' port was already used. The old service is disabled now. You should check the services file manually now.',mbInformation,MB_OK);
//			InstExec('notepad.exe',filename,GetCurrentDir(),true,false,SW_SHOWNORMAL,errcode);
			Exec('notepad.exe',filename,GetCurrentDir(),SW_SHOWNORMAL,ewWaitUntilTerminated,errcode);
		end;
	end
	else
		Result := false;
end;


{
StartType Can be set as follow

	SERVICE_BOOT_START          = $0;
	SERVICE_SYSTEM_START        = $1;
	SERVICE_AUTO_START          = $2;
	SERVICE_DEMAND_START        = $3;
	SERVICE_DISABLED            = $4;
}
function ConfigService(ServiceName: String; StartType: DWORD): Boolean;
begin
  Result := RegWriteDWordValue(HKLM, 'SYSTEM\CurrentControlSet\Services\' + ServiceName, 'Start', StartType);
end;

function UninsService(ServiceName:string):boolean;
var
	i: integer;
begin
  i := 0;
  while( IsServiceRunning(ServiceName) ) do
  begin
    i := i + 1;
    StopService(ServiceName);
    if i > 10 then break;
  end;

  if IsServiceRunning(ServiceName) then
    Result := False
  else
    Result := RemoveService(ServiceName);
end;

[/Code]

#endif


